"""
Generates a new model
"""
import sys
import subprocess
import os
import fileinput
import glob

from pyecore.resources import ResourceSet
from pyecoregen.ecore import EcoreGenerator
import pyecore.type  # We register the XML types (generated by pyecoregen)

merge = False

# We open the metamodel
rset = ResourceSet()
mm_root = rset.get_resource('pygeppetto/ecore/geppettoModel.ecore').contents[0]

base_path = sys.argv[1] if len(sys.argv) > 1 else 'generated'
model_path = os.path.join(base_path, 'pygeppetto')
if not os.path.exists(model_path):
    os.makedirs(model_path)
# We generate the code using the EcoreGenerator
EcoreGenerator(auto_register_package=True).generate(mm_root, outfolder=model_path)


def replaces(line):

    if 'from pygeppetto.type import' in line:
        line = ''
    elif '=Boolean,' in line:
        line = line.replace('Boolean', 'EBoolean')
    elif '=String,' in line:
        line = line.replace('String', 'EString')
    elif '=Long,' in line:
        line = line.replace('Long', 'ELong')
    elif '=Int,' in line:
        line = line.replace('Int', 'EInt')
    elif '=IntObject,' in line:
        line = line.replace('IntObject', 'EInt')
    elif '=Double,' in line:
        line = line.replace('Double', 'EDouble')
    elif '*, ' in line:
        line = line.replace('*, ', '')
    return line

for fname in glob.glob(model_path + "/model/**/*.py"):
    with fileinput.FileInput(fname, inplace=True) as file:
        for line in file:
            if 'from model import' in line:
                line = line.replace('from model import', 'from ..model import')

            elif 'from model.' in line:
                line = line.replace('from model.', 'from ..')

            line = replaces(line)
            print(line, end= '')

for fname in glob.glob(model_path + "/model/*.py"):
    with fileinput.FileInput(fname, inplace=True) as file:
        for line in file:

            if 'from model.' in line:
                line = line.replace('from model.', 'from .')
            line = replaces(line)
            print(line, end='')
if merge:
    subprocess.run(['git', 'init'], cwd=base_path)
    subprocess.run('git add .'.split(' '), cwd=base_path)
    subprocess.run('git commit -m "message"'.split(' '), cwd=base_path)
    subprocess.run('git remote add origin https://github.com/openworm/pygeppetto.git'.split(" "), cwd=base_path)
    subprocess.run('git fetch'.split(" "), cwd=base_path)
    subprocess.run('git merge --allow-unrelated-histories origin/development'.split(" "), cwd=base_path)
